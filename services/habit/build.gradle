plugins {
    id 'org.springframework.boot' version '3.0.5'
    id 'org.liquibase.gradle' version '2.1.1'
    id 'java'
    id 'com.diffplug.spotless' version '6.13.0'
    id "io.freefair.lombok" version "6.6.3"
    id 'com.github.jk1.dependency-license-report' version '2.1'
}

apply plugin: 'io.spring.dependency-management'
apply from: '../gradle/intTest.gradle'
apply from: '../gradle/licenses.gradle'
apply from: 'gradle/jacoco.gradle'

group = 'de.codecentric'
sourceCompatibility = JavaVersion.VERSION_17

def dbUrlDefault = 'jdbc:postgresql://localhost:10001/'
def dbUserDefault = 'postgres'
def dbPasswordDefault = 'postgres'

bootRun {
}

liquibase {
    activities {
        //noinspection GroovyAssignabilityCheck
        main {
            classpath "$projectDir/src/main/resources/"
            changeLogFile '/db/changelog/db.changelog-master.yaml'
            url project.hasProperty('dbUrl') ? project.property('dbUrl') : dbUrlDefault
            username project.hasProperty('dbUser') ? project.property('dbUser') : dbUserDefault
            password project.hasProperty('dbPassword') ? project.property('dbPassword') : dbPasswordDefault
            defaultSchemaName 'hc_habit'
        }
    }
}

spotless {
    java {
        googleJavaFormat('1.7')
    }
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

configurations {
    testImplementation {
        exclude group: 'junit', module: 'junit'
    }
}

ext {
    versions = [
            restAssured       : '5.3.0',
            junitJupiter      : '5.8.0',
            chaosMonkey       : '3.0.0',
            testcontainers    : '1.17.6',
            postgresql        : '42.5.1',
            springdoc         : '2.0.4',
            liquibase         : '4.19.0',
            pactProvider      : '4.4.8',
            jna               : '5.8.0',
            preliquibase      : '1.3.0'
    ]
}
// override the version the spring boot dependency-management plugin would enforce
ext['junit-jupiter.version'] = versions.junitJupiter
ext['jna.version'] = versions.jna // Required for Docker on ARM

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$versions.springdoc"
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
    runtimeOnly "org.postgresql:postgresql:$versions.postgresql"
    runtimeOnly "org.liquibase:liquibase-core:$versions.liquibase"
    runtimeOnly "de.codecentric:chaos-monkey-spring-boot:$versions.chaosMonkey"
    liquibaseRuntime "org.liquibase:liquibase-core:$versions.liquibase"
    liquibaseRuntime "org.postgresql:postgresql:$versions.postgresql"
    liquibaseRuntime "ch.qos.logback:logback-core"
    liquibaseRuntime "ch.qos.logback:logback-classic"
    // Liquibase cannot create the schema by itself like flyway and spring boot did never intent
    // for the schema.sql mechanism to work alongside a high level schema migration tool.
    // The behaviour we relied on to create the schema was never supported and is fixed since
    // spring boot 2.5.
    // see: https://github.com/spring-projects/spring-boot/issues/22741
    implementation "net.lbruun.springboot:preliquibase-spring-boot-starter:$versions.preliquibase"
    testImplementation "org.junit.jupiter:junit-jupiter:"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    intTestImplementation "au.com.dius.pact.provider:junit5spring:$versions.pactProvider"
    intTestImplementation "org.junit.jupiter:junit-jupiter"
    intTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    intTestImplementation "io.rest-assured:json-path:$versions.restAssured"
    intTestImplementation("io.rest-assured:rest-assured:$versions.restAssured") {
        exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    }
    intTestImplementation("io.rest-assured:xml-path:$versions.restAssured") {
        exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    }
    intTestImplementation platform("org.testcontainers:testcontainers-bom:$versions.testcontainers")
    intTestImplementation 'org.testcontainers:junit-jupiter'
    intTestImplementation 'org.testcontainers:postgresql'
}

// disable the jar task to prevent the plain jar from being created.
tasks.named("jar") {
  enabled = false
}
