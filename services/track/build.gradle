plugins {
    id 'org.springframework.boot' version '3.1.8'
    id 'org.flywaydb.flyway' version '10.8.1'
    id 'java'
    id 'com.diffplug.spotless' version '6.25.0'
    id "io.freefair.lombok" version "8.6"
    id 'com.github.jk1.dependency-license-report' version '2.5'
}

apply plugin: 'io.spring.dependency-management'
apply from: '../gradle/intTest.gradle'
apply from: '../gradle/licenses.gradle'
apply from: 'gradle/jacoco.gradle'

group = 'de.codecentric'

def dbUrlDefault = 'jdbc:postgresql://localhost:10002/'
def dbUserDefault = 'postgres'
def dbPasswordDefault = 'postgres'

bootRun {
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

lombok {
    version = "1.18.30"
}

flyway {
    url = project.hasProperty('dbUrl') ? project.property('dbUrl') : dbUrlDefault
    user = project.hasProperty('dbUser') ? project.property('dbUser') : dbUserDefault
    password = project.hasProperty('dbPassword') ? project.property('dbPassword') : dbPasswordDefault
    schemas = ['hc_track']
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

spotless {
    java {
        googleJavaFormat('1.17.0')
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://repo.spring.io/milestone"
    }
}

test {
    useJUnitPlatform()
}

configurations {
    testImplementation {
        exclude group: 'junit', module: 'junit'
    }
}

ext {
    versions = [
            restAssured       : '5.4.0',
            junitJupiter      : '5.8.0',
            chaosMonkey       : '3.1.0',
            testcontainers    : '1.19.7',
            reflections       : '0.10.2',
            postgresql        : '42.7.2',
            jna               : '5.8.0'
    ]
}
// override the version the spring boot dependency-management plugin would enforce
ext['junit-jupiter.version'] = versions.junitJupiter
ext['jna.version'] = versions.jna // Required for Docker on ARM

dependencyManagement {
    imports {
        mavenBom 'org.springframework.modulith:spring-modulith-bom:1.1.3'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security:spring-security-oauth2-jose'

    // Spring Modulith
    implementation "org.springframework.modulith:spring-modulith-starter-core"
    implementation "org.springframework.modulith:spring-modulith-starter-jpa"
    implementation "org.springframework.modulith:spring-modulith-events-kafka"
    intTestImplementation "org.springframework.modulith:spring-modulith-starter-test"

    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
    runtimeOnly "org.postgresql:postgresql:$versions.postgresql"
    runtimeOnly 'org.flywaydb:flyway-core'
    runtimeOnly "de.codecentric:chaos-monkey-spring-boot:$versions.chaosMonkey"
    runtimeOnly "org.aspectj:aspectjweaver"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.reflections:reflections:$versions.reflections"
    intTestImplementation "org.junit.jupiter:junit-jupiter"
    intTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    intTestImplementation "io.rest-assured:json-path:$versions.restAssured"
    intTestImplementation("io.rest-assured:rest-assured:$versions.restAssured") {
        exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    }
    intTestImplementation("io.rest-assured:xml-path:$versions.restAssured") {
        exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    }
    intTestImplementation platform("org.testcontainers:testcontainers-bom:$versions.testcontainers")
    intTestImplementation 'org.testcontainers:junit-jupiter'
    intTestImplementation 'org.testcontainers:postgresql'
}
// disable the jar task to prevent the plain jar from being created.
tasks.named("jar") {
  enabled = false
}
